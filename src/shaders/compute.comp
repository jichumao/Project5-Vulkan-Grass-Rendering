#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer InBlades {
	Blade inBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
   uint vertexCount;   // write the number of blades remaining here
   uint instanceCount; // = 1
   uint firstVertex;   // = 0
   uint firstInstance; // = 0
} numBlades;


#define GRAVITY_ACCELERATION    5.0
#define WIND_MAGNITUDE		    1.0
#define WIND_FREQUENCY		    0.7
#define TOLERANCE_FRUSTUM		-1.0
#define DISTANCE_LEVEL 10

#define ORIENTATION_CULLING		1
#define VIEW_FRUSTUM_CULLING	0
#define DISTANCE_CULLING		0

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inFrustum(vec3 pos) {
    vec4 ndcPos = camera.proj * camera.view * vec4(pos, 1.f);
    float homogeneous_coord = ndcPos.w + TOLERANCE_FRUSTUM;
    return inBounds(ndcPos.x, homogeneous_coord) && inBounds(ndcPos.y, homogeneous_coord);
}

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining
void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    // Apply forces on every blade and update the vertices in the buffer
	Blade thisBlade = inBlades[gl_GlobalInvocationID.x];
	vec3 v0 = thisBlade.v0.xyz;
	vec3 v1 = thisBlade.v1.xyz;
	vec3 v2 = thisBlade.v2.xyz;
	vec3 up = thisBlade.up.xyz;

	float orientAngle = thisBlade.v0.w;
	float height = thisBlade.v1.w;
	float width = thisBlade.v2.w;
	float stiffness = thisBlade.up.w;

	vec3 oriention = normalize(vec3(-cos(orientAngle), 0.0, sin(orientAngle))); 
	vec3 f = normalize(cross(oriention, up));	
	// Apply forces on every blade and update the vertices in the buffer

	// Gravity
	vec4 D = vec4(0.0, -1.0, 0.0, GRAVITY_ACCELERATION);
	vec3 gE = normalize(D.xyz) * D.w; 		
	vec3 gF = 0.25 * length(gE) * f;	
	vec3 gravity = gE + gF;

	// Recovery force
	vec3 iv2 = v0 + up * height;			
	vec3 recovery = (iv2 - v2) * stiffness;

	float windPhaseX = WIND_FREQUENCY * v0.x * totalTime;
	float windPhaseZ = WIND_FREQUENCY * v0.z * totalTime;
	vec3  wind = WIND_MAGNITUDE * vec3(sin(windPhaseX), 0.0, cos(windPhaseZ));

	vec3  windDir = normalize(wind);
	vec3  dir = normalize(v2 - v0);

	float fd = 1.0 - abs(dot(windDir, dir));
	float fr = dot(v2 - v0, up) / height;
	vec3 windForce = wind * fd * fr;

	// Corrected Update
	v2 += (gravity + recovery + windForce) * deltaTime;
	
	float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
	v1 = v0 + height * up * max(1.f - lProj/height, 0.05 * max(lProj/height, 1.f));

	v2 -= up * min(dot(up, v2 - v0), 0);
	float L0 = distance(v0, v2);
	float L1 = distance(v0, v1) + distance(v1, v2);
	// (2L0 + (n-1)L1)/(n+1)£¬When n = 3, L = (L0 + L1) / 2
	float L = 0.5 * (L0 + L1);
	float r = height / L;
	v1 = v0 + r * (v1 - v0); 
	v2 = v1 + r * (v2 - v1);

	thisBlade.v1.xyz = v1;
	thisBlade.v2.xyz = v2;
	inBlades[gl_GlobalInvocationID.x] = thisBlade;
	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

// Cull blades that have no thickness 
	vec3 cameraPos = inverse(camera.view)[3].xyz;
	vec3 cameraToBladeDir = v0 - cameraPos;
	vec3 viewDir =  cameraToBladeDir - up * dot(cameraToBladeDir, up);
#if ORIENTATION_CULLING
// Cull blades that are facing or oppsite the camera
	if (abs(dot(normalize(viewDir), oriention)) > 0.9) {
		return;
	}
#endif

// Cull blades that are not in the camera frustum
#if VIEW_FRUSTUM_CULLING
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    if( !inFrustum(v0) && !inFrustum(v2) && !inFrustum(m)) {
        return;
    }

#endif

// Cull blades that are too far away
#if DISTANCE_CULLING
	float dProj = length(viewDir);
	if (gl_GlobalInvocationID.x % DISTANCE_LEVEL < int(floor(DISTANCE_LEVEL * (1.0 - dProj / 20.0f)))) {
		return;
	}
#endif

	// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
	// This is sort of an advanced feature so we've showed you what this buffer should look like
	culledBlades[atomicAdd(numBlades.vertexCount, 1)] = inBlades[gl_GlobalInvocationID.x];
}